"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Blob", {
  enumerable: true,
  get: function () {
    return _index.Blob;
  }
});
exports.Buffer = void 0;
Object.defineProperty(exports, "File", {
  enumerable: true,
  get: function () {
    return _index.File;
  }
});
Object.defineProperty(exports, "INSPECT_MAX_BYTES", {
  enumerable: true,
  get: function () {
    return _index.INSPECT_MAX_BYTES;
  }
});
exports.SlowBuffer = void 0;
Object.defineProperty(exports, "atob", {
  enumerable: true,
  get: function () {
    return _index.atob;
  }
});
Object.defineProperty(exports, "btoa", {
  enumerable: true,
  get: function () {
    return _index.btoa;
  }
});
module.exports = exports.constants = void 0;
Object.defineProperty(exports, "isAscii", {
  enumerable: true,
  get: function () {
    return _index.isAscii;
  }
});
Object.defineProperty(exports, "isUtf8", {
  enumerable: true,
  get: function () {
    return _index.isUtf8;
  }
});
exports.kStringMaxLength = exports.kMaxLength = void 0;
Object.defineProperty(exports, "resolveObjectURL", {
  enumerable: true,
  get: function () {
    return _index.resolveObjectURL;
  }
});
Object.defineProperty(exports, "transcode", {
  enumerable: true,
  get: function () {
    return _index.transcode;
  }
});
var _index = require("./index.cjs");
const workerdBuffer = process.getBuiltinModule("node:buffer");
const {
  Buffer,
  SlowBuffer,
  constants,
  kMaxLength,
  kStringMaxLength
} = workerdBuffer;
exports.kStringMaxLength = kStringMaxLength;
exports.kMaxLength = kMaxLength;
exports.constants = constants;
exports.SlowBuffer = SlowBuffer;
exports.Buffer = Buffer;
module.exports = {
  /**
   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
   */
  Blob: _index.Blob,
  File: _index.File,
  INSPECT_MAX_BYTES: _index.INSPECT_MAX_BYTES,
  atob: _index.atob,
  btoa: _index.btoa,
  isAscii: _index.isAscii,
  isUtf8: _index.isUtf8,
  resolveObjectURL: _index.resolveObjectURL,
  transcode: _index.transcode,
  /**
   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
   */
  Buffer,
  SlowBuffer,
  constants,
  kMaxLength,
  kStringMaxLength
};