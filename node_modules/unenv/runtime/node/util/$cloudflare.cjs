"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextEncoder = exports.TextDecoder = exports.MIMEType = exports.MIMEParams = void 0;
Object.defineProperty(exports, "_errnoException", {
  enumerable: true,
  get: function () {
    return _index._errnoException;
  }
});
Object.defineProperty(exports, "_exceptionWithHostPort", {
  enumerable: true,
  get: function () {
    return _index._exceptionWithHostPort;
  }
});
exports.formatWithOptions = exports.format = exports.deprecate = exports.default = exports.debuglog = exports.debug = exports.callbackify = exports.aborted = exports._extend = void 0;
Object.defineProperty(exports, "getSystemErrorMap", {
  enumerable: true,
  get: function () {
    return _index.getSystemErrorMap;
  }
});
Object.defineProperty(exports, "getSystemErrorName", {
  enumerable: true,
  get: function () {
    return _index.getSystemErrorName;
  }
});
exports.inspect = exports.inherits = void 0;
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _index.isArray;
  }
});
Object.defineProperty(exports, "isBoolean", {
  enumerable: true,
  get: function () {
    return _index.isBoolean;
  }
});
Object.defineProperty(exports, "isBuffer", {
  enumerable: true,
  get: function () {
    return _index.isBuffer;
  }
});
Object.defineProperty(exports, "isDate", {
  enumerable: true,
  get: function () {
    return _index.isDate;
  }
});
Object.defineProperty(exports, "isDeepStrictEqual", {
  enumerable: true,
  get: function () {
    return _index.isDeepStrictEqual;
  }
});
Object.defineProperty(exports, "isError", {
  enumerable: true,
  get: function () {
    return _index.isError;
  }
});
Object.defineProperty(exports, "isFunction", {
  enumerable: true,
  get: function () {
    return _index.isFunction;
  }
});
Object.defineProperty(exports, "isNull", {
  enumerable: true,
  get: function () {
    return _index.isNull;
  }
});
Object.defineProperty(exports, "isNullOrUndefined", {
  enumerable: true,
  get: function () {
    return _index.isNullOrUndefined;
  }
});
Object.defineProperty(exports, "isNumber", {
  enumerable: true,
  get: function () {
    return _index.isNumber;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _index.isObject;
  }
});
Object.defineProperty(exports, "isPrimitive", {
  enumerable: true,
  get: function () {
    return _index.isPrimitive;
  }
});
Object.defineProperty(exports, "isRegExp", {
  enumerable: true,
  get: function () {
    return _index.isRegExp;
  }
});
Object.defineProperty(exports, "isString", {
  enumerable: true,
  get: function () {
    return _index.isString;
  }
});
Object.defineProperty(exports, "isSymbol", {
  enumerable: true,
  get: function () {
    return _index.isSymbol;
  }
});
Object.defineProperty(exports, "isUndefined", {
  enumerable: true,
  get: function () {
    return _index.isUndefined;
  }
});
exports.parseArgs = exports.log = void 0;
Object.defineProperty(exports, "parseEnv", {
  enumerable: true,
  get: function () {
    return _index.parseEnv;
  }
});
exports.stripVTControlCharacters = exports.promisify = void 0;
Object.defineProperty(exports, "styleText", {
  enumerable: true,
  get: function () {
    return _index.styleText;
  }
});
exports.types = exports.transferableAbortSignal = exports.transferableAbortController = exports.toUSVString = void 0;
var _index = require("./index.cjs");
const workerdUtil = process.getBuiltinModule("node:util");
const {
  MIMEParams,
  MIMEType,
  TextDecoder,
  TextEncoder,
  _extend,
  aborted,
  callbackify,
  debug,
  debuglog,
  deprecate,
  format,
  formatWithOptions,
  inherits,
  inspect,
  log,
  parseArgs,
  promisify,
  stripVTControlCharacters,
  toUSVString,
  transferableAbortController,
  transferableAbortSignal
} = workerdUtil;
exports.transferableAbortSignal = transferableAbortSignal;
exports.transferableAbortController = transferableAbortController;
exports.toUSVString = toUSVString;
exports.stripVTControlCharacters = stripVTControlCharacters;
exports.promisify = promisify;
exports.parseArgs = parseArgs;
exports.log = log;
exports.inspect = inspect;
exports.inherits = inherits;
exports.formatWithOptions = formatWithOptions;
exports.format = format;
exports.deprecate = deprecate;
exports.debuglog = debuglog;
exports.debug = debug;
exports.callbackify = callbackify;
exports.aborted = aborted;
exports._extend = _extend;
exports.TextEncoder = TextEncoder;
exports.TextDecoder = TextDecoder;
exports.MIMEType = MIMEType;
exports.MIMEParams = MIMEParams;
const types = exports.types = {
  isExternal: _index.types.isExternal,
  isAnyArrayBuffer: workerdUtil.types.isAnyArrayBuffer,
  ...workerdUtil.types
};
module.exports = {
  /**
   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
   */
  // @ts-expect-error undocumented public API
  _errnoException: _index._errnoException,
  _exceptionWithHostPort: _index._exceptionWithHostPort,
  getSystemErrorMap: _index.getSystemErrorMap,
  getSystemErrorName: _index.getSystemErrorName,
  isArray: _index.isArray,
  isBoolean: _index.isBoolean,
  isBuffer: _index.isBuffer,
  isDate: _index.isDate,
  isDeepStrictEqual: _index.isDeepStrictEqual,
  isError: _index.isError,
  isFunction: _index.isFunction,
  isNull: _index.isNull,
  isNullOrUndefined: _index.isNullOrUndefined,
  isNumber: _index.isNumber,
  isObject: _index.isObject,
  isPrimitive: _index.isPrimitive,
  isRegExp: _index.isRegExp,
  isString: _index.isString,
  isSymbol: _index.isSymbol,
  isUndefined: _index.isUndefined,
  parseEnv: _index.parseEnv,
  styleText: _index.styleText,
  /**
   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
   */
  MIMEParams,
  MIMEType,
  TextDecoder,
  TextEncoder,
  _extend,
  aborted,
  callbackify,
  debug,
  debuglog,
  deprecate,
  format,
  formatWithOptions,
  inherits,
  inspect,
  log,
  parseArgs,
  promisify,
  stripVTControlCharacters,
  toUSVString,
  transferableAbortController,
  transferableAbortSignal,
  // special-cased deep merged symbols
  types
};