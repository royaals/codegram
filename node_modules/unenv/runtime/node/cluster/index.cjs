"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.workers = exports.setupPrimary = exports.setupMaster = exports.settings = exports.schedulingPolicy = exports.isWorker = exports.isPrimary = exports.isMaster = exports.fork = exports.disconnect = exports.default = exports._maxListeners = exports._eventsCount = exports._events = exports.Worker = exports.SCHED_RR = exports.SCHED_NONE = void 0;
var _noop = _interopRequireDefault(require("../../mock/noop.cjs"));
var _proxy = _interopRequireDefault(require("../../mock/proxy.cjs"));
var _events2 = require("../events/index.cjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const _cluster = new _events2.EventEmitter();
const disconnect = exports.disconnect = _noop.default;
const fork = () => _proxy.default.__createMock__("cluster.Worker");
exports.fork = fork;
const isMaster = exports.isMaster = true;
const isPrimary = exports.isPrimary = true;
const isWorker = exports.isWorker = false;
const SCHED_NONE = exports.SCHED_NONE = 1;
const SCHED_RR = exports.SCHED_RR = 2;
const schedulingPolicy = exports.schedulingPolicy = SCHED_RR;
const settings = exports.settings = {};
const setupPrimary = exports.setupPrimary = _noop.default;
const setupMaster = exports.setupMaster = _noop.default;
const workers = exports.workers = {};
const Worker = exports.Worker = _proxy.default.__createMock__("cluster.Worker");
const _events = exports._events = _cluster._events;
const _eventsCount = exports._eventsCount = _cluster._eventsCount;
const _maxListeners = exports._maxListeners = _cluster._maxListeners;
_cluster.disconnect = disconnect;
_cluster.fork = fork;
_cluster.isMaster = isMaster;
_cluster.isPrimary = isPrimary;
_cluster.isWorker = isWorker;
_cluster.SCHED_NONE = SCHED_NONE;
_cluster.SCHED_RR = SCHED_RR;
_cluster.schedulingPolicy = SCHED_RR;
_cluster.settings = settings;
_cluster.setupPrimary = setupPrimary;
_cluster.setupMaster = setupMaster;
_cluster.workers = workers;
_cluster.Worker = Worker;
module.exports = _cluster;