"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "_debugEnd", {
  enumerable: true,
  get: function () {
    return _process._debugEnd;
  }
});
Object.defineProperty(exports, "_debugProcess", {
  enumerable: true,
  get: function () {
    return _process._debugProcess;
  }
});
Object.defineProperty(exports, "_eventsCount", {
  enumerable: true,
  get: function () {
    return _process._eventsCount;
  }
});
Object.defineProperty(exports, "_fatalException", {
  enumerable: true,
  get: function () {
    return _process._fatalException;
  }
});
Object.defineProperty(exports, "_getActiveHandles", {
  enumerable: true,
  get: function () {
    return _process._getActiveHandles;
  }
});
Object.defineProperty(exports, "_getActiveRequests", {
  enumerable: true,
  get: function () {
    return _process._getActiveRequests;
  }
});
Object.defineProperty(exports, "_kill", {
  enumerable: true,
  get: function () {
    return _process._kill;
  }
});
Object.defineProperty(exports, "_preload_modules", {
  enumerable: true,
  get: function () {
    return _process._preload_modules;
  }
});
Object.defineProperty(exports, "_rawDebug", {
  enumerable: true,
  get: function () {
    return _process._rawDebug;
  }
});
Object.defineProperty(exports, "_startProfilerIdleNotifier", {
  enumerable: true,
  get: function () {
    return _process._startProfilerIdleNotifier;
  }
});
Object.defineProperty(exports, "_stopProfilerIdleNotifier", {
  enumerable: true,
  get: function () {
    return _process._stopProfilerIdleNotifier;
  }
});
Object.defineProperty(exports, "_tickCallback", {
  enumerable: true,
  get: function () {
    return _process._tickCallback;
  }
});
Object.defineProperty(exports, "abort", {
  enumerable: true,
  get: function () {
    return _process.abort;
  }
});
Object.defineProperty(exports, "addListener", {
  enumerable: true,
  get: function () {
    return _process.addListener;
  }
});
Object.defineProperty(exports, "allowedNodeEnvironmentFlags", {
  enumerable: true,
  get: function () {
    return _process.allowedNodeEnvironmentFlags;
  }
});
Object.defineProperty(exports, "arch", {
  enumerable: true,
  get: function () {
    return _process.arch;
  }
});
Object.defineProperty(exports, "argv", {
  enumerable: true,
  get: function () {
    return _process.argv;
  }
});
Object.defineProperty(exports, "argv0", {
  enumerable: true,
  get: function () {
    return _process.argv0;
  }
});
Object.defineProperty(exports, "assert", {
  enumerable: true,
  get: function () {
    return _process.assert;
  }
});
Object.defineProperty(exports, "availableMemory", {
  enumerable: true,
  get: function () {
    return _process.availableMemory;
  }
});
Object.defineProperty(exports, "binding", {
  enumerable: true,
  get: function () {
    return _process.binding;
  }
});
Object.defineProperty(exports, "chdir", {
  enumerable: true,
  get: function () {
    return _process.chdir;
  }
});
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function () {
    return _process.config;
  }
});
Object.defineProperty(exports, "constrainedMemory", {
  enumerable: true,
  get: function () {
    return _process.constrainedMemory;
  }
});
Object.defineProperty(exports, "cpuUsage", {
  enumerable: true,
  get: function () {
    return _process.cpuUsage;
  }
});
Object.defineProperty(exports, "cwd", {
  enumerable: true,
  get: function () {
    return _process.cwd;
  }
});
Object.defineProperty(exports, "debugPort", {
  enumerable: true,
  get: function () {
    return _process.debugPort;
  }
});

Object.defineProperty(exports, "dlopen", {
  enumerable: true,
  get: function () {
    return _process.dlopen;
  }
});
Object.defineProperty(exports, "emit", {
  enumerable: true,
  get: function () {
    return _process.emit;
  }
});
Object.defineProperty(exports, "emitWarning", {
  enumerable: true,
  get: function () {
    return _process.emitWarning;
  }
});
exports.env = void 0;
Object.defineProperty(exports, "eventNames", {
  enumerable: true,
  get: function () {
    return _process.eventNames;
  }
});
Object.defineProperty(exports, "execArgv", {
  enumerable: true,
  get: function () {
    return _process.execArgv;
  }
});
Object.defineProperty(exports, "execPath", {
  enumerable: true,
  get: function () {
    return _process.execPath;
  }
});
Object.defineProperty(exports, "exit", {
  enumerable: true,
  get: function () {
    return _process.exit;
  }
});
Object.defineProperty(exports, "exitCode", {
  enumerable: true,
  get: function () {
    return _process.exitCode;
  }
});
Object.defineProperty(exports, "features", {
  enumerable: true,
  get: function () {
    return _process.features;
  }
});
Object.defineProperty(exports, "getActiveResourcesInfo", {
  enumerable: true,
  get: function () {
    return _process.getActiveResourcesInfo;
  }
});
exports.getBuiltinModule = void 0;
Object.defineProperty(exports, "getMaxListeners", {
  enumerable: true,
  get: function () {
    return _process.getMaxListeners;
  }
});
Object.defineProperty(exports, "getegid", {
  enumerable: true,
  get: function () {
    return _process.getegid;
  }
});
Object.defineProperty(exports, "geteuid", {
  enumerable: true,
  get: function () {
    return _process.geteuid;
  }
});
Object.defineProperty(exports, "getgid", {
  enumerable: true,
  get: function () {
    return _process.getgid;
  }
});
Object.defineProperty(exports, "getgroups", {
  enumerable: true,
  get: function () {
    return _process.getgroups;
  }
});
Object.defineProperty(exports, "getuid", {
  enumerable: true,
  get: function () {
    return _process.getuid;
  }
});
Object.defineProperty(exports, "hasUncaughtExceptionCaptureCallback", {
  enumerable: true,
  get: function () {
    return _process.hasUncaughtExceptionCaptureCallback;
  }
});
Object.defineProperty(exports, "hrtime", {
  enumerable: true,
  get: function () {
    return _process.hrtime;
  }
});
Object.defineProperty(exports, "kill", {
  enumerable: true,
  get: function () {
    return _process.kill;
  }
});
Object.defineProperty(exports, "listenerCount", {
  enumerable: true,
  get: function () {
    return _process.listenerCount;
  }
});
Object.defineProperty(exports, "listeners", {
  enumerable: true,
  get: function () {
    return _process.listeners;
  }
});
Object.defineProperty(exports, "loadEnvFile", {
  enumerable: true,
  get: function () {
    return _process.loadEnvFile;
  }
});
Object.defineProperty(exports, "memoryUsage", {
  enumerable: true,
  get: function () {
    return _process.memoryUsage;
  }
});
exports.nextTick = void 0;
Object.defineProperty(exports, "off", {
  enumerable: true,
  get: function () {
    return _process.off;
  }
});
Object.defineProperty(exports, "on", {
  enumerable: true,
  get: function () {
    return _process.on;
  }
});
Object.defineProperty(exports, "once", {
  enumerable: true,
  get: function () {
    return _process.once;
  }
});
Object.defineProperty(exports, "pid", {
  enumerable: true,
  get: function () {
    return _process.pid;
  }
});
Object.defineProperty(exports, "platform", {
  enumerable: true,
  get: function () {
    return _process.platform;
  }
});
Object.defineProperty(exports, "ppid", {
  enumerable: true,
  get: function () {
    return _process.ppid;
  }
});
Object.defineProperty(exports, "prependListener", {
  enumerable: true,
  get: function () {
    return _process.prependListener;
  }
});
Object.defineProperty(exports, "prependOnceListener", {
  enumerable: true,
  get: function () {
    return _process.prependOnceListener;
  }
});
Object.defineProperty(exports, "rawListeners", {
  enumerable: true,
  get: function () {
    return _process.rawListeners;
  }
});
Object.defineProperty(exports, "release", {
  enumerable: true,
  get: function () {
    return _process.release;
  }
});
Object.defineProperty(exports, "removeAllListeners", {
  enumerable: true,
  get: function () {
    return _process.removeAllListeners;
  }
});
Object.defineProperty(exports, "removeListener", {
  enumerable: true,
  get: function () {
    return _process.removeListener;
  }
});
Object.defineProperty(exports, "report", {
  enumerable: true,
  get: function () {
    return _process.report;
  }
});
Object.defineProperty(exports, "resourceUsage", {
  enumerable: true,
  get: function () {
    return _process.resourceUsage;
  }
});
Object.defineProperty(exports, "setMaxListeners", {
  enumerable: true,
  get: function () {
    return _process.setMaxListeners;
  }
});
Object.defineProperty(exports, "setSourceMapsEnabled", {
  enumerable: true,
  get: function () {
    return _process.setSourceMapsEnabled;
  }
});
Object.defineProperty(exports, "setUncaughtExceptionCaptureCallback", {
  enumerable: true,
  get: function () {
    return _process.setUncaughtExceptionCaptureCallback;
  }
});
Object.defineProperty(exports, "setegid", {
  enumerable: true,
  get: function () {
    return _process.setegid;
  }
});
Object.defineProperty(exports, "seteuid", {
  enumerable: true,
  get: function () {
    return _process.seteuid;
  }
});
Object.defineProperty(exports, "setgid", {
  enumerable: true,
  get: function () {
    return _process.setgid;
  }
});
Object.defineProperty(exports, "setgroups", {
  enumerable: true,
  get: function () {
    return _process.setgroups;
  }
});
Object.defineProperty(exports, "setuid", {
  enumerable: true,
  get: function () {
    return _process.setuid;
  }
});
Object.defineProperty(exports, "sourceMapsEnabled", {
  enumerable: true,
  get: function () {
    return _process.sourceMapsEnabled;
  }
});
Object.defineProperty(exports, "stderr", {
  enumerable: true,
  get: function () {
    return _process.stderr;
  }
});
Object.defineProperty(exports, "stdin", {
  enumerable: true,
  get: function () {
    return _process.stdin;
  }
});
Object.defineProperty(exports, "stdout", {
  enumerable: true,
  get: function () {
    return _process.stdout;
  }
});
Object.defineProperty(exports, "title", {
  enumerable: true,
  get: function () {
    return _process.title;
  }
});
Object.defineProperty(exports, "umask", {
  enumerable: true,
  get: function () {
    return _process.umask;
  }
});
Object.defineProperty(exports, "uptime", {
  enumerable: true,
  get: function () {
    return _process.uptime;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _process.version;
  }
});
Object.defineProperty(exports, "versions", {
  enumerable: true,
  get: function () {
    return _process.versions;
  }
});
var _process = require("./internal/process.cjs");
const unpatchedGlobalThisProcess = globalThis["process"];
const getBuiltinModule = exports.getBuiltinModule = unpatchedGlobalThisProcess.getBuiltinModule;
const workerdProcess = getBuiltinModule("node:process");
const {
  env,
  nextTick
} = workerdProcess;
exports.nextTick = nextTick;
exports.env = env;
module.exports = {
  /**
   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
   */
  // @ts-expect-error undocumented public API
  _debugEnd: _process._debugEnd,
  _debugProcess: _process._debugProcess,
  // TODO: implemented yet in unenv
  //_events,
  _eventsCount: _process._eventsCount,
  // TODO: implemented yet in unenv
  //_exiting,
  _fatalException: _process._fatalException,
  _getActiveHandles: _process._getActiveHandles,
  _getActiveRequests: _process._getActiveRequests,
  _kill: _process._kill,
  // TODO: implemented yet in unenv
  //_linkedBinding,
  // TODO: implemented yet in unenv
  //_maxListeners,
  _preload_modules: _process._preload_modules,
  _rawDebug: _process._rawDebug,
  _startProfilerIdleNotifier: _process._startProfilerIdleNotifier,
  _stopProfilerIdleNotifier: _process._stopProfilerIdleNotifier,
  _tickCallback: _process._tickCallback,
  abort: _process.abort,
  addListener: _process.addListener,
  allowedNodeEnvironmentFlags: _process.allowedNodeEnvironmentFlags,
  arch: _process.arch,
  argv: _process.argv,
  argv0: _process.argv0,
  assert: _process.assert,
  availableMemory: _process.availableMemory,
  binding: _process.binding,
  chdir: _process.chdir,
  config: _process.config,
  constrainedMemory: _process.constrainedMemory,
  cpuUsage: _process.cpuUsage,
  cwd: _process.cwd,
  debugPort: _process.debugPort,
  dlopen: _process.dlopen,
  // TODO: implemented yet in unenv
  //domain,
  emit: _process.emit,
  emitWarning: _process.emitWarning,
  eventNames: _process.eventNames,
  execArgv: _process.execArgv,
  execPath: _process.execPath,
  exit: _process.exit,
  exitCode: _process.exitCode,
  features: _process.features,
  getActiveResourcesInfo: _process.getActiveResourcesInfo,
  getMaxListeners: _process.getMaxListeners,
  getegid: _process.getegid,
  geteuid: _process.geteuid,
  getgid: _process.getgid,
  getgroups: _process.getgroups,
  getuid: _process.getuid,
  hasUncaughtExceptionCaptureCallback: _process.hasUncaughtExceptionCaptureCallback,
  hrtime: _process.hrtime,
  // TODO: implemented yet in unenv
  //initgroups,
  kill: _process.kill,
  listenerCount: _process.listenerCount,
  listeners: _process.listeners,
  loadEnvFile: _process.loadEnvFile,
  memoryUsage: _process.memoryUsage,
  // TODO: implemented yet in unenv
  //moduleLoadList,
  off: _process.off,
  on: _process.on,
  once: _process.once,
  // TODO: implemented yet in unenv
  //openStdin,
  pid: _process.pid,
  platform: _process.platform,
  ppid: _process.ppid,
  prependListener: _process.prependListener,
  prependOnceListener: _process.prependOnceListener,
  rawListeners: _process.rawListeners,
  // TODO: implemented yet in unenv
  //reallyExit,
  release: _process.release,
  removeAllListeners: _process.removeAllListeners,
  removeListener: _process.removeListener,
  report: _process.report,
  resourceUsage: _process.resourceUsage,
  setMaxListeners: _process.setMaxListeners,
  setSourceMapsEnabled: _process.setSourceMapsEnabled,
  setUncaughtExceptionCaptureCallback: _process.setUncaughtExceptionCaptureCallback,
  setegid: _process.setegid,
  seteuid: _process.seteuid,
  setgid: _process.setgid,
  setgroups: _process.setgroups,
  setuid: _process.setuid,
  sourceMapsEnabled: _process.sourceMapsEnabled,
  stderr: _process.stderr,
  stdin: _process.stdin,
  stdout: _process.stdout,
  title: _process.title,
  umask: _process.umask,
  uptime: _process.uptime,
  version: _process.version,
  versions: _process.versions,
  /**
   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
   */
  env,
  getBuiltinModule,
  nextTick
};