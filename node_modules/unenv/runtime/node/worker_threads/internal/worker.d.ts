/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from "node:events";
import type worker_threads from "node:worker_threads";
import { Readable } from "node:stream";
export declare class Worker extends EventEmitter implements worker_threads.Worker {
    stdin: null;
    stdout: Readable;
    stderr: Readable;
    threadId: number;
    performance: {
        eventLoopUtilization: () => {
            idle: number;
            active: number;
            utilization: number;
        };
    };
    postMessage(value: any, transferList?: readonly worker_threads.TransferListItem[] | undefined): void;
    ref(): void;
    unref(): void;
    terminate(): Promise<number>;
    getHeapSnapshot(): Promise<Readable>;
}
