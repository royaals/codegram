/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type readline from "node:readline";
import type { Abortable } from "node:events";
import { EventEmitter } from "node:events";
export declare class Interface extends EventEmitter implements readline.Interface {
    terminal: boolean;
    line: string;
    cursor: number;
    getPrompt(): string;
    setPrompt(prompt: string): void;
    prompt(preserveCursor?: boolean | undefined): void;
    question(query: string, callback: (answer: string) => void): void;
    question(query: string, options: Abortable, callback: (answer: string) => void): void;
    resume(): this;
    close(): void;
    write(data: string | Buffer, key?: readline.Key | undefined): void;
    write(data: string | Buffer | null | undefined, key: readline.Key): void;
    getCursorPos(): readline.CursorPos;
    pause(): this;
    [Symbol.asyncIterator](): AsyncIterableIterator<string>;
}
